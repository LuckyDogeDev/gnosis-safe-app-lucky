import { INTERFACE_MESSAGES, SDK_MESSAGES } from './messageIds';
import { txs } from './txs';
export declare type UppercaseNetworks = 'MAINNET' | 'MORDEN' | 'ROPSTEN' | 'RINKEBY' | 'GOERLI' | 'KOVAN' | 'UNKNOWN';
export declare type LowercaseNetworks = 'mainnet' | 'morden' | 'ropsten' | 'rinkeby' | 'goerli' | 'kovan' | 'unknown';
export declare type Networks = UppercaseNetworks | LowercaseNetworks;
export interface Transaction {
    to: string;
    value: string;
    data: string;
}
export declare type RequestId = number | string;
export interface SdkInstance {
    addListeners: (listeners: SafeListeners) => void;
    removeListeners: () => void;
    sendTransactions: (txs: Transaction[], requestId?: RequestId) => SentSDKMessage<'SEND_TRANSACTIONS'>;
    txs: typeof txs;
}
export interface SafeInfo {
    safeAddress: string;
    network: LowercaseNetworks;
    ethBalance: string;
}
export interface TxConfirmationEvent {
    requestId: RequestId;
    safeTxHash: string;
}
export interface TxRejectionEvent {
    requestId: RequestId;
}
export interface SafeListeners {
    onSafeInfo: (info: SafeInfo) => void;
    onTransactionConfirmation?: (event: TxConfirmationEvent) => void;
    onTransactionRejection?: (event: TxRejectionEvent) => void;
}
export declare type InterfaceMessageIds = keyof typeof INTERFACE_MESSAGES;
export interface InterfaceMessageEvent extends MessageEvent {
    data: {
        requestId: RequestId;
        messageId: InterfaceMessageIds;
        data: InterfaceMessageToPayload[InterfaceMessageIds];
    };
}
export interface SDKMessageToPayload {
    [SDK_MESSAGES.SAFE_APP_SDK_INITIALIZED]: undefined;
    [SDK_MESSAGES.SEND_TRANSACTIONS]: Transaction[];
}
export declare type SDKMessageIds = keyof typeof SDK_MESSAGES;
export interface InterfaceMessageToPayload {
    [INTERFACE_MESSAGES.ON_SAFE_INFO]: SafeInfo;
    [INTERFACE_MESSAGES.TRANSACTION_CONFIRMED]: {
        safeTxHash: string;
    };
    [INTERFACE_MESSAGES.ENV_INFO]: {
        txServiceUrl: string;
    };
    [INTERFACE_MESSAGES.TRANSACTION_REJECTED]: Record<string, unknown>;
}
export declare type SentSDKMessage<T extends SDKMessageIds> = {
    messageId: T;
    requestId: RequestId;
    data: SDKMessageToPayload[T];
};
export declare enum Operation {
    CALL = 0,
    DELEGATE_CALL = 1,
    CREATE = 2
}
export declare enum TransferMethods {
    TRANSFER = "transfer",
    TRANSFER_FROM = "transferFrom",
    SAFE_TRANSFER_FROM = "safeTransferFrom"
}
export declare enum SettingsChangeMethods {
    SETUP = "setup",
    SET_FALLBACK_HANDLER = "setFallbackHandler",
    ADD_OWNER_WITH_THRESHOLD = "addOwnerWithThreshold",
    REMOVE_OWNER = "removeOwner",
    REMOVE_OWNER_WITH_THRESHOLD = "removeOwnerWithThreshold",
    SWAP_OWNER = "swapOwner",
    CHANGE_THRESHOLD = "changeThreshold",
    CHANGE_MASTER_COPY = "changeMasterCopy",
    ENABLE_MODULE = "enableModule",
    DISABLE_MODULE = "disableModule",
    EXEC_TRANSACTION_FROM_MODULE = "execTransactionFromModule",
    APPROVE_HASH = "approveHash",
    EXEC_TRANSACTION = "execTransaction"
}
export declare type DataDecodedMethod = TransferMethods | SettingsChangeMethods | string;
export interface ValueDecoded {
    operation: Operation;
    to: string;
    value: number;
    data: string;
    dataDecoded: DataDecoded;
}
export interface SingleTransactionMethodParameter {
    name: string;
    type: string;
    value: string;
}
export interface MultiSendMethodParameter extends SingleTransactionMethodParameter {
    valueDecoded: ValueDecoded[];
}
export declare type Parameter = MultiSendMethodParameter | SingleTransactionMethodParameter;
export interface DataDecoded {
    method: DataDecodedMethod;
    parameters: Parameter[];
}
export declare type ConfirmationServiceModel = {
    confirmationType: string;
    owner: string;
    submissionDate: string;
    signature: string;
    signatureType: string;
    transactionHash: string;
};
export declare type TxServiceModel = {
    baseGas: number;
    blockNumber?: number | null;
    confirmations: ConfirmationServiceModel[];
    confirmationsRequired: number;
    creationTx?: boolean | null;
    data?: string | null;
    dataDecoded?: DataDecoded;
    ethGasPrice: string;
    executionDate?: string | null;
    executor: string;
    fee: string;
    gasPrice: string;
    gasToken: string;
    gasUsed: number;
    isExecuted: boolean;
    isSuccessful: boolean;
    modified: string;
    nonce?: number | null;
    operation: number;
    origin?: string | null;
    refundReceiver: string;
    safe: string;
    safeTxGas: number;
    safeTxHash: string;
    signatures: string;
    submissionDate?: string | null;
    to: string;
    transactionHash?: string | null;
    value: string;
};
